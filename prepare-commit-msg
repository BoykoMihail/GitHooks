#!/usr/bin/env python

import sys, re
from subprocess import check_output

regexBranchAndFeature = '(develop)|((fix|feature|hotfix)\/(\w+-\d+))'
regexIssueBranch = '\w+-\d+'
regexIssue = '(\w+-\d+)'

msgSuccess = 'Everything went well!'
msgError = 'The JIRA ticker from message does not match the JIRA ticker in the branch name. \nPlease check the message.'
msgErrorNotUpper = 'Please enter the Jira number in capital letters'
msgBranchNameError = 'Incorrect branch name. I can not find the JIRA ticker'
msgBranchNameErrorMaster = 'You are trying to commit to a develop/master branch'
msgCommitCanseled = 'Commit cancelled'
msgCommitWarning = 'Commit is succes, but Jira number does not match the number from the branch'

colorRed = '91m'
colorYellow = '93m'
colorGreen = '92m'

successMsg = 'SUCCESS'
errorMsg = 'ERROR'
warningMsg = 'WARNING'

isGUIClient = False

# Function for color output
def printColored(skk, color, mess): 
    if isGUIClient:
        print skk
    else:
        print("[\033[96mprepare-commit-msg hook\033[00m] [\033[{}{}\033[00m] \n\033[90m{}\033[00m".format(color, mess, skk)) 

# def printGreen(skk): 
#     if isGUIClient:
#         print skk
#     else:
#         print("[\033[96mprepare-commit-msg hook\033[00m] [\033[92mSUCCESS\033[00m] \n\033[90m{}\033[00m".format(skk)) 

# def printYellow(skk): 
#     if isGUIClient:
#         print skk
#     else:
#         print("[\033[96mprepare-commit-msg hook\033[00m] [\033[93mWARNING\033[00m] \n\033[90m{}\033[00m".format(skk)) 
 
# Function to add featureNumber to the beginning of commit msg
def setIssue(fh, featureNumber, commit_msg):
    fh.seek(0, 0)
    fh.write('{0}: {1}'.format(featureNumber.upper(), commit_msg))

def writeMsg(fh, commit_msg):
    fh.seek(0, 0)
    fh.write('{0}'.format(commit_msg))

def addWithotIssueMsg(fh, commit_msg):
    issueBranch = "[without issue commit]"
    setIssue(fh, issueBranch, commit_msg)

def askUserWithoutLogic(mess, nowMess):
    if isGUIClient:
        return True
    else: 
        user_input = check_output("read -p \"" + mess + "(Y/N): \" userinput && echo \"$userinput\"", shell=True, stdin=sys.stdin).rstrip().upper()
        while user_input not in ['Y','N']:
            user_input = check_output("read -p \"" + mess +" Please Y or N: \" userinput && echo \"$userinput\"", shell=True, stdin=sys.stdin).rstrip().upper()
        if user_input == 'Y':
            printColored(msgSuccess, colorGreen, successMsg)
            return False
        elif user_input == 'N':
            printColored(nowMess, colorYellow, warningMsg)
            return True

def masterOrDevBranchLogic(fh, commit_msg):

    listOfIssueMsgWithoutApper = re.findall(regexIssue, commit_msg)
    listOfIssueMsg = []
    listOfIssueMsg = map(str.upper, listOfIssueMsgWithoutApper)

    printColored(msgBranchNameErrorMaster, colorYellow, warningMsg)
    msg = 'Are you sure you want to continue?'

    if listOfIssueMsg:
        if isGUIClient:
            writeMsg(fh, commit_msg)
            sys.exit(0)
        else:
            sys.exit(askUserWithoutLogic(msg, msgCommitCanseled))
    else:
        if isGUIClient:
            addWithotIssueMsg(fh, commit_msg)
        else:
            if askUserWithoutLogic(msg, msgCommitCanseled):
                sys.exit(1)
            else:
                addWithotIssueMsg(fh, commit_msg)

    

def branchDontContainsJiraTaskLogic(branch, fh, commit_msg):
    printColored(msgBranchNameError, colorRed, errorMsg)
    msg = 'Do you want to merge changes to ' + branch + ' branch?'
    if isGUIClient:
        addWithotIssueMsg(fh, commit_msg)
        sys.exit(0)
    else: 
        sys.exit(askUserWithoutLogic(msg, msgCommitCanseled))

def messegeContainsIssueNumberLogic(fh, issueBranch, listOfIssueMsg, commit_msg):
    issueMSG = listOfIssueMsg[0]

    if issueBranch.upper() in listOfIssueMsg:
        printColored(msgSuccess, colorGreen, successMsg)
        writeMsg(fh, commit_msg)
        sys.exit(0)
    else:
        printColored(msgError, colorRed, warningMsg)
        msg = 'Do you want to add to the message with issue from branch name?'
        if askUserWithoutLogic(msg, msgCommitWarning):
            if isGUIClient:
                writeMsg(fh, commit_msg)
                sys.exit(0)
            else:
                writeMsg(fh, commit_msg)
                sys.exit(0)
        else:
            setIssue(fh, issueBranch, commit_msg)
            sys.exit(0)

def messegeDontContainsIssueNumberLogic(fh, issueBranch, commit_msg):
    printColored(msgError, colorRed, errorMsg)
    msg = 'Do you want to add to the message?'
    if askUserWithoutLogic(msg, msgCommitCanseled):
        if isGUIClient:
            setIssue(fh, issueBranch, commit_msg)
            sys.exit(0)
        else:
            sys.exit(1)
    else:
        setIssue(fh, issueBranch, commit_msg)
        sys.exit(0)

def branchContainsJiraTaskLogic(fh, listOfIssueBranch, commit_msg):
    issueBranch = listOfIssueBranch[0]
    listOfIssueMsgWithoutApper = re.findall(regexIssue, commit_msg)
    listOfIssueMsg = []
    for issueMsg in listOfIssueMsgWithoutApper:
        commit_msg = commit_msg.replace(issueMsg, issueMsg.upper())
        # the card is not used, because the cycle is nevertheless needed to replace the numbers of jiracas from Jira in the upper case
        listOfIssueMsg.append(issueMsg.upper())

    if listOfIssueMsg:
        messegeContainsIssueNumberLogic(fh, issueBranch, listOfIssueMsg, commit_msg)
    else:
        messegeDontContainsIssueNumberLogic(fh, issueBranch, commit_msg)

def runScript():

    commit_msg_filepath = sys.argv[1]

    branch = check_output(['git', 'symbolic-ref', '--short', 'HEAD']).strip()

    with open(commit_msg_filepath, 'r+') as fh:
        commit_msg = fh.read()
        listOfIssueBranch = re.findall(regexIssueBranch, branch)
        if listOfIssueBranch :
            branchContainsJiraTaskLogic(fh, listOfIssueBranch, commit_msg)
        elif branch not in ['master', 'develop']:
            branchDontContainsJiraTaskLogic(branch, fh, commit_msg)
        else:
            masterOrDevBranchLogic(fh, commit_msg)

try:
    sys.stdin = open("/dev/tty", "r")
    isGUIClient = False
except:
    isGUIClient = True

runScript()

